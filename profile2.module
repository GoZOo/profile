<?php

/**
 * @file
 * Support for configurable user profiles.
 */

use Drupal\profile2\Plugin\Core\Entity\Profile;
use Drupal\profile2\Plugin\Core\Entity\ProfileType;
use Drupal\user\Plugin\Core\Entity\User;
use Drupal\Core\Annotation\Plugin;
use Drupal\Core\Annotation\Translation;

/**
 * Implements hook_entity_info_alter().
 */
function profile2_entity_info_alter(&$info) {
  // Add bundle info but bypass entity_load() as we cannot use it here.
  $config_names = config_get_storage_names_with_prefix('profile2.type.');
  foreach ($config_names as $config_name) {
    $config = config($config_name);
    $info['profile2']['bundles'][$config->get('id')] = array(
      'label' => $config->get('label'),
      'admin' => array(
        'path' => 'admin/people/profiles/manage/%profile2_type',
        'real path' => 'admin/people/profiles/manage/' . $config->get('id'),
        'bundle argument' => 4,
        'access arguments' => array('administer profiles'),
      ),
    );
  }
}

/**
 * Entity URI callback for profiles.
 *
 * @param Drupal\profile2\Plugin\Core\Entity\Profile $profile
 *   A profile entity.
 */
function profile2_profile_uri(Profile $profile) {
  $uri = entity_load('user', $profile->uid)->uri();
  $uri['options']['fragment'] = 'profile-' . $profile->bundle();
  return $uri;
}

/**
 * Entity URI callback for profile types.
 *
 * @param Drupal\profile2\Plugin\Core\Entity\ProfileType $profile_type
 *   A profile type entity.
 */
function profile2_profile_type_uri(ProfileType $profile_type) {
  return array(
    'path' => 'admin/people/profiles/manage/' . $profile_type->id(),
  );
}

/**
 * Implements hook_menu().
 */
function profile2_menu() {
  $items['admin/people/profiles'] = array(
    'title' => 'Profile types',
    'description' => 'Manage profiles, including fields.',
    'page callback' => 'profile2_type_list_page',
    'access arguments' => array('administer profile types'),
    'type' => MENU_LOCAL_TASK,
    // @todo User module: Apply custom/higher weights to Permissions and Roles.
    'weight' => -1,
  );
  $items['admin/people/profiles/add'] = array(
    'title' => 'Add profile type',
    'page callback' => 'profile2_type_add',
    'access arguments' => array('administer profile types'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'profile2.admin.inc',
  );
  $items['admin/people/profiles/manage/%profile2_type'] = array(
    'title' => 'Edit profile type',
    'page callback' => 'profile2_type_edit',
    'page arguments' => array(4),
    'access arguments' => array('administer profile types'),
    'file' => 'profile2.admin.inc',
  );
  $items['admin/people/profiles/manage/%profile2_type/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/people/profiles/manage/%profile2_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profile2_type_delete_form', 4),
    'access arguments' => array('administer profile types'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'profile2.admin.inc',
  );

  // @todo Move into User module.
  $items['user/%user/edit/account'] = array(
    'title' => 'Account',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['user/%user/edit/%profile2_menu'] = array(
    'load arguments' => array('%map', 'edit'),
    'title' => 'Edit profile',
    'title callback' => 'profile2_menu_title_profile',
    'title arguments' => array(3),
    'access callback' => 'profile2_access',
    'access arguments' => array('edit', 3),
    'page callback' => 'profile2_profile_edit',
    'page arguments' => array(3),
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%user/edit/%profile2_menu/delete'] = array(
    'load arguments' => array('%map', 'edit'),
    'title' => 'Delete profile',
    'access callback' => 'profile2_access',
    'access arguments' => array('delete', 3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profile2_delete_confirm_form', 3),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'profile2.pages.inc',
  );
  return $items;
}

/**
 * Menu argument callback; Loads a profile of a certain type for a given user.
 *
 * @param string $type_id
 *   The profile type ID to load.
 * @param array $map
 *   The menu router argument map. The loaded user account is expected as second
 *   argument.
 * @param string $op
 *   (optional) The operation to perform. If 'edit' and if there is no profile
 *   for the user account yet, a new profile entity will be created on the fly.
 *
 * @return Drupal\profile2\Plugin\Core\Entity\Profile|false
 *   The profile of type $type_id of the user account, or FALSE.
 */
function profile2_menu_load($type_id, $map, $op = '') {
  if ($type_id === '') {
    return FALSE;
  }
  if (!isset($map[1]) || !($map[1] instanceof User)) {
    return FALSE;
  }
  $account = $map[1];
  $profiles = entity_load_multiple_by_properties('profile2', array(
    'uid' => $account->id(),
    'type' => $type_id,
  ));
  if ($op == 'edit' && !$profile = reset($profiles)) {
    $profile = entity_create('profile2', array(
      'type' => $type_id,
      'uid' => $account->uid,
    ));
  }
  return $profile;
}

/**
 * Menu title callback for a profile edit link.
 *
 * @param Drupal\profile2\Plugin\Core\Entity\Profile $profile
 *   The profile to return a title for.
 *
 * @return string
 *   The unsanitized profile label.
 */
function profile2_menu_title_profile(Profile $profile) {
  return $profile->label();
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function profile2_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path === 'user/%/edit' || $root_path === 'user/%/edit/%') {
    $tabs = &$data['tabs'][1]['output'];
    // Determine the currently selected tab, if any.
    $selected_index = -1;
    $selected_id = '';
    foreach ($tabs as $index => &$tab) {
      if (isset($tab['#link']['path']) && $tab['#link']['path'] == 'user/%/edit/%') {
        $selected_index = $index;
        $selected_id = $router_item['original_map'][3];
      }
    }
    // Expand the dynamic %profile_menu argument into a tab for each type.
    $types = entity_load_multiple('profile2_type');
    foreach ($types as $type) {
      // If the current page is the active tab registered in hook_menu(), then
      // the menu router item with the dynamic argument will be exposed already.
      // We must not duplicate that tab, but in order to ensure that all of our
      // tabs appear in a consistent order when switching between tabs, we need
      // to re-inject it.
      if ($type->id() === $selected_id) {
        $tabs[$selected_index]['#link']['title'] = $type->label();
        $tabs[] = $tabs[$selected_index];
        unset($tabs[$selected_index]);
        continue;
      }
      $tabs[] = array(
        '#theme' => 'menu_local_task',
        '#link' => array(
          'title' => $type->label(),
          'href' => 'user/' . $router_item['original_map'][1] . '/edit/' . $type->id(),
          'localized_options' => array('html' => FALSE),
        ),
      );
    }
    if ($types) {
      $data['tabs'][1]['count']++;
    }
  }
}

/**
 * Page callback; Lists available ProfileType objects.
 */
function profile2_type_list_page() {
  $controller = entity_list_controller('profile2_type');
  return $controller->render();
}

/**
 * Menu argument loader; Load a profile type by string.
 *
 * @param string $id
 *   The machine-readable name of a profile type to load.
 *
 * @return Drupal\profile2\Plugin\Core\Entity\ProfileType|false
 *   A profile type array or FALSE if $type does not exist.
 */
function profile2_type_load($id) {
  return entity_load('profile2_type', $id);
}

/**
 * Implements hook_permission().
 */
function profile2_permission() {
  $permissions = array(
    'administer profile types' => array(
      'title' => t('Administer profile types'),
      'description' => t('Create and delete fields on user profiles and set their permissions.'),
    ),
    'administer profiles' => array(
      'title' => t('Administer profiles'),
      'description' => t('Edit and view all user profiles.'),
    ),
  );
  // Generate per profile type permissions.
  foreach (entity_load_multiple('profile2_type') as $type) {
    $type_name = $type->id();
    $permissions += array(
      "edit own $type_name profile" => array(
        'title' => t('%type_name: Edit own profile', array('%type_name' => $type->label())),
      ),
      "edit any $type_name profile" => array(
        'title' => t('%type_name: Edit any profile', array('%type_name' => $type->label())),
      ),
      "view own $type_name profile" => array(
        'title' => t('%type_name: View own profile', array('%type_name' => $type->label())),
      ),
      "view any $type_name profile" => array(
        'title' => t('%type_name: View any profile', array('%type_name' => $type->label())),
      ),
      "delete own $type_name profile" => array(
        'title' => t('%type_name: Delete own profile', array('%type_name' => $type->label())),
      ),
      "delete any $type_name profile" => array(
        'title' => t('%type_name: Delete any profile', array('%type_name' => $type->label())),
      ),
    );
  }
  return $permissions;
}

/**
 * Implements hook_user_predelete().
 */
function profile2_user_predelete($account) {
  if ($profiles = entity_load_multiple_by_properties('profile2', array('uid' => $account->id()))) {
    entity_get_controller('profile2')->delete($profiles);
  }
}

/**
 * Implements hook_user_view().
 */
function profile2_user_view($account, $view_mode, $langcode) {
  foreach (entity_load_multiple('profile2_type') as $id => $type) {
    $profiles = entity_load_multiple_by_properties('profile2', array(
      'uid' => $account->id(),
      'type' => $id,
    ));

    if ($profile = reset($profiles)) {
      if ($profile->access('view')) {
        $account->content['profile_' . $id] = array(
          '#type' => 'user_profile_category',
          '#title' => $profile->label(),
          '#prefix' => '<a id="profile-' . $profile->bundle() . '"></a>',
        );
        entity_render_controller('profile2')->buildContent(array($profile), 'account');
        $account->content['profile_' . $id]['view'] = $profile->content;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the registration form.
 */
function profile2_form_user_register_form_alter(&$form, &$form_state) {
  foreach (entity_load_multiple('profile2_type') as $id => $type) {
    if ($type->get('registration')) {
      if (empty($form_state['profiles'][$id])) {
        $form_state['profiles'][$id] = entity_create('profile2', array('type' => $id));
      }
      profile2_attach_form($form, $form_state);

      // Wrap each profile form in a fieldset.
      $form['profile_' . $id] += array(
        '#type' => 'fieldset',
        '#title' => check_plain($type->label()),
      );
    }
  }
  $form['#validate'][] = 'profile2_user_form_validate';
  $form['actions']['submit']['#submit'][] = 'profile2_user_form_submit';
}

/**
 * Page callback; Presents the form to edit a profile of a user.
 *
 * @param Drupal\profile2\Plugin\Core\Entity\Profile $profile
 *   The user account profile to edit.
 *
 * @return array
 *   A form array as expected by drupal_render().
 *
 * @see profile2_user_form_validate()
 * @see profile2_user_form_submit()
 */
function profile2_profile_edit(Profile $profile) {
  return entity_get_form($profile);
}

/**
 * Attaches the profile forms of the profiles set in $form_state['profiles'].
 *
 * Modules may alter the profile2 entity form regardless to which form it is
 * attached by making use of hook_form_profile2_form_alter().
 *
 * @param $form
 *   The form to which to attach the profile2 form. For each profile the form
 *   is added to @code $form['profile_' . $profile->type] @endcode. This helper
 *   also adds in a validation and a submit handler caring for the attached
 *   profile forms.
 *
 * @see hook_form_profile2_form_alter()
 * @see profile2_user_form_validate()
 * @see profile2_user_form_submit()
 */
function profile2_attach_form(&$form, &$form_state) {
  foreach ($form_state['profiles'] as $bundle => $profile) {
    $form['profile_' . $bundle]['#tree'] = TRUE;
    $form['profile_' . $bundle]['#parents'] = array('profile_' . $bundle);

    field_attach_form('profile2', $profile, $form['profile_' . $bundle], $form_state);

    if (count(field_info_instances('profile2', $bundle)) == 0) {
      $form['profile_' . $bundle]['message'] = array(
        '#access' => user_access('administer profile types'),
        '#markup' => t('No fields have been associated with this profile type. Go to the <a href="!url">Profile types</a> page to add some fields.', array('!url' => url('admin/people/profiles'))),
      );
    }

    // Provide a central place for modules to alter the profile forms, but
    // skip that in case the caller cares about invoking the hooks.
    // @see profile2_form().
    if (!isset($form_state['profile2_skip_hook'])) {
      $hooks = array();
      $hooks[] = 'form_profile2_edit_' . $bundle . '_form';
      $hooks[] = 'form_profile2_form';
      drupal_alter($hooks, $form, $form_state);
    }
  }
}

/**
 * Validation handler for the profile form.
 *
 * @see profile2_attach_form()
 */
function profile2_user_form_validate(&$form, &$form_state) {
  foreach ($form_state['profiles'] as $bundle => $profile) {
    if (isset($form_state['values']['profile_' . $bundle])) {
      // @see entity_form_field_validate()
      $pseudo_entity = entity_create('profile2', array_merge($form_state['values']['profile_' . $bundle], array('type' => $bundle)));
      field_attach_form_validate('profile2', $pseudo_entity, $form['profile_' . $bundle], $form_state);
    }
  }
}

/**
 * Submit handler that builds and saves all profiles in the form.
 *
 * @see profile2_attach_form()
 */
function profile2_user_form_submit(&$form, &$form_state) {
  profile2_form_submit_build_profile($form, $form_state);
  // This is needed as some submit callbacks like user_register_submit() rely on
  // clean form values.
  profile2_form_submit_cleanup($form, $form_state);

  foreach ($form_state['profiles'] as $bundle => $profile) {
    // During registration set the uid field of the newly created user.
    if (empty($profile->uid) && isset($form_state['user']->uid)) {
      $profile->uid = $form_state['user']->uid;
    }
    $profile->save();
  }

  // Show message only in profile edit form.
  if ($form['#form_id'] == 'profile2_user_form') {
    drupal_set_message(t('The changes have been saved.'));
  }
}

/**
 * Submit builder. Extracts the form values and updates the profile entities.
 *
 * @see profile2_attach_form()
 */
function profile2_form_submit_build_profile(&$form, &$form_state) {
  foreach ($form_state['profiles'] as $bundle => $profile) {
    // @see entity_form_submit_build_entity()
    if (isset($form['profile_' . $bundle]['#entity_builders'])) {
      foreach ($form['profile_' . $bundle]['#entity_builders'] as $function) {
        $function('profile2', $profile, $form['profile_' . $bundle], $form_state);
      }
    }
    field_attach_submit('profile2', $profile, $form['profile_' . $bundle], $form_state);
  }
}

/**
 * Cleans up the form values as the user modules relies on clean values.
 *
 * @see profile2_attach_form()
 */
function profile2_form_submit_cleanup(&$form, &$form_state) {
  foreach ($form_state['profiles'] as $bundle => $profile) {
    unset($form_state['values']['profile_' . $bundle]);
  }
}

/**
 * Helper function for checking profile access.
 *
 * @todo Remove once the routes are converted to the new routing system.
 */
function profile2_access($op, Profile $profile, User $account = NULL) {
  return $profile->access($op, $account);
}

/**
 * Implements hook_profile2_access().
 */
function profile2_profile2_access($op, Profile $profile, User $account) {
  // Don't grant access for users to delete their profile.
  if ($op == 'delete') {
    return;
  }

  if (user_access("$op any $profile->type profile", $account)) {
    return TRUE;
  }

  if (isset($profile->uid) && $profile->uid == $account->uid && user_access("$op own $profile->type profile", $account)) {
    return TRUE;
  }
  // Do not explicitly deny access so others may still grant access.
}

/**
 * Implements hook_theme().
 */
function profile2_theme() {
  return array(
    'profile2' => array(
      'render element' => 'elements',
      'template' => 'profile2',
    ),
  );
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Adds a checkbox for controlling field view access to fields added to
 * profiles.
 */
function profile2_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if ($form['instance']['entity_type']['#value'] == 'profile2') {
    $form['field']['settings']['profile2_private'] = array(
      '#type' => 'checkbox',
      '#title' => t('Make the content of this field private.'),
      '#default_value' => !empty($form['#field']['settings']['profile2_private']),
      '#description' => t('If checked, the content of this field is only shown to the profile owner and administrators.'),
    );
  }
  else {
    // Add the value to the form so it isn't lost.
    $form['field']['settings']['profile2_private'] = array(
      '#type' => 'value',
      '#value' => !empty($form['#field']['settings']['profile2_private']),
    );
  }
}

/**
 * Implements hook_field_access().
 */
function profile2_field_access($op, $field, $entity_type, $profile = NULL, $account = NULL) {
  if ($entity_type == 'profile2' && $op == 'view' && !empty($field['settings']['profile2_private']) && !user_access('administer profiles', $account)) {
    // For profiles, deny general view access for private fields.
    if (!isset($profile)) {
      return FALSE;
    }
    // Also deny view access, if someone else views a private field.
    $account = isset($account) ? $account : $GLOBALS['user'];
    if ($account->uid != $profile->uid) {
      return FALSE;
    }
  }
}
